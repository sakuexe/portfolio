---
import type { AboutMeElementModel } from "../client";
import { BaseApiUrl } from "../utils/umbraco"
import SkLogo from "../assets/images/sklogo.svg"
import SkLogoRaw from "../assets/images/sklogo.svg?raw"

interface Props {
  model: AboutMeElementModel;
}

const { model } = Astro.props;
---

<style>
  .logo:hover > svg {
    display: none;
  }
  .logo:hover > .code-version {
    display: block;
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 8;
  }
</style>

<section id="aboutme" class="grid max-w-6xl mx-auto md:grid-cols-3">
  <div class="space-y-4 col-span-2">

    <div class="subheader">
      <p><span>// 01</span> About me</p>
      <h2>Who Am I?</h2>
    </div>

    <Fragment set:html={model.properties?.description?.markup} />

    { 
      model.properties?.cvFile && (
        <p>Feel free to check out my CV!</p>
        <a 
          href={`${BaseApiUrl}/${model.properties.cvFile[0].url}`}
          target="_blank"
          class="btn bg-secondary-600 w-max hover:bg-transparent outline-secondary-600 hover:outline-2"
        >Download CV</a> 
      )
    }
  </div>
  <div class="relative scale-150 hidden -z-10 md:block">
    <div class="logo w-full opacity-50 fill-primary-400 absolute top-1/2 -translate-y-1/2">
      <SkLogo class="fill-primary-400"/>
      <p class="code-version hidden">{SkLogoRaw}</p>
    </div>
    <div class="absolute top-0 left-0 w-full h-full bg-gradient-to-r from-primary to-transparent"></div>
  </div>
</section>

<script>
  const emailLink: HTMLLinkElement | null = document.querySelector('a.email');

  emailLink?.addEventListener('click', (e) => {
    e.preventDefault();
    const email = emailLink.href.split("/").pop();
    // copy to clipboard
    if (!email) {
      console.error("failed to get email from link", emailLink.href);
      return
    }
    navigator.clipboard.writeText(email);
    // indicate that the email has been copied
    const originalText = emailLink.textContent;
    emailLink.textContent = "email copied!";
    setTimeout(() => {
      emailLink.textContent = originalText;
    }, 3000);
  });
</script>
