---
import { Picture } from "astro:assets";
import heroBackground from "../assets/images/floating-cubes.webp"
---

<style>
picture {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transition: 0.15s opacity ease-in-out;
  z-index: -10;
  opacity: 0;
  @media (prefers-reduced-motion: no-preference) {
    transition: opacity 0.15s ease-in-out;
  }
}

picture > img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
</style>

<section id="hero" class="flex items-center justify-center min-h-[80svh] relative overflow-clip">
  <div class="sm:text-center">
    <h1 class="text-header font-bold font-sans drop-shadow-md">Saku Karttunen</h1>
    <p class="mix-blend-difference font-semibold">Fullstack Software Engineer / Graphic Designer</p>
  </div>
  <!-- Gradient overlays, to add a feather effect -->
  <div class="absolute top-0 left-0 w-full h-1/4 bg-gradient-to-b from-primary to-transparent"></div>
  <div class="absolute bottom-0 left-0 w-full h-1/3 bg-gradient-to-t from-primary to-transparent"></div>
  <!-- Background image with a parallax effect -->
  <Picture 
    src={heroBackground}
    alt="background image with floating cubes and simple geometries"
    layout="full-width"
    widths={[640, 1024, 1536, 1920, 2560, 3840, 5120]}
    formats={["avif", "webp", "jpeg"]}
    quality={95}
    position="center"
    fit="cover"
    loading="lazy"
    decoding="async"
  >
  </Picture>
  <div class="grid-pattern absolute top-0 left-0 w-full h-full mix-blend-lighten opacity-50 -z-20"></div>
</section>

<script>
const heroPicture: HTMLPictureElement | null = document.querySelector('#hero > picture');
if (!heroPicture) throw new Error("No picture element was found within `#hero`");

const heroImage: HTMLImageElement | null = heroPicture.querySelector('img');
if (!heroImage) throw new Error("No img element was found within `#hero > picture`");

const startTime = performance.now();

// Add a simple parallax effect to the hero section
window.addEventListener('scroll', () => {
  const parallaxStrength = 0.25;
  heroPicture.style.transform = `translateY(${window.scrollY * parallaxStrength}px)`;
});

// Adding a nice fade-in effect to the hero image
heroImage.onload = showHeroPicture;
// if image is already loaded 
// (fallback if this part of the code is executed after the image has been loaded)
if (heroImage.complete) showHeroPicture();

heroImage.onerror = () => {
  console.error('No image found with the src path: ', heroImage.currentSrc);
};

function showHeroPicture() {
  const thresholdInMs = 500;

  // if the time it has taken to load the image is less than the threshold,
  // transition with a short animation
  if (performance.now() - startTime < thresholdInMs) {
    heroPicture!.style.opacity = "1";
    console.debug("hero image loaded with short animation")
    return
  };

  // otherwise transition with a longer animation
  console.debug("hero image loaded with long animation")
  heroPicture!.style.opacity = "1";
  heroPicture!.style.transitionDuration = "1s";
}
</script>
