---
import type { 
  SkillsContentModel,
  ProgressBarElementModel,
  IconWithLabelElementModel,
} from "../client";
import { GetContent, TypedBlockList } from "../utils/umbraco";
import SkillBadge from "./SkillBadge.astro";

const model = await GetContent<SkillsContentModel>("/home/skills")
const allSkills = TypedBlockList<ProgressBarElementModel | IconWithLabelElementModel>(model.properties?.skillItems);

const { progressBars, iconWithLabels: iconsWithLabels } = allSkills.reduce(
  (acc, item) => {
    switch (item.contentType) {
      case "progressBar":
        acc.progressBars.push(item as ProgressBarElementModel); 
        break;
      case "iconWithLabel":
        acc.iconWithLabels.push(item as IconWithLabelElementModel);
        break;
    }
    return acc;
  },
  { progressBars: [] as ProgressBarElementModel[], iconWithLabels: [] as IconWithLabelElementModel[] }
);
---

<style>
  #skill-badges {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    grid-auto-rows: 1fr;
    gap: 1rem;
    @media (min-width: 456px) {
      grid-template-columns: repeat(2, 1fr)
    }
    @media (min-width: 712px) {
      grid-template-columns: repeat(3, 1fr)
    }
    @media (min-width: 1024px) {
      grid-template-columns: repeat(2, 1fr)
    }
    @media (min-width: 1375px) {
      grid-template-columns: repeat(3, 1fr)
    }
  }
  
  #skill-badges > div {
    --tile-color: var(--color-primary-900);
    display: flex;
    flex-direction: column;
    height: 100%;
    justify-content: center;
    align-items: center;
    gap: 0.75rem;
    /* background-color: var(--color-primary-900); */
    padding: 0.75rem 1rem;
    position: relative;
  }

  /* looks funky, but it works, keeps the tiling nice looking */
  #skill-badges > div:nth-child(even) {
      background-color: var(--tile-color);
      @media (min-width: 456px) and (max-width: 712px) {
        background-color: transparent;
      }
      @media (min-width: 1024px) and (max-width: 1375px) {
        background-color: transparent;
      }
  }

  /* skip the 1st; then select 2,3; skip 4,5; select 6,7; ... */
  #skill-badges > div:is(:nth-child(4n + 2), :nth-child(4n + 3)) {
    @media (min-width: 456px) and (max-width: 712px) {
      background-color: var(--tile-color);
    }
    @media (min-width: 1024px) and (max-width: 1375px) {
      background-color: var(--tile-color);
    }
  }
  
  #skill-badges .badge-icon {
    width: 64px;
    height: auto;
    aspect-ratio: 1/1;
    display: flex;
    justify-content: center;
  }

  #skill-badges > div::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: var(--color-secondary-500);
    mix-blend-mode: hue;
  }
</style>

<section id="skills" class="grid gap-8 max-w-content mx-auto lg:grid-cols-2">
  <div class="space-y-6 flex flex-col justify-center">

    <div class="subheader">
      <p><span>// 03</span> Skills</p>
      <h2>{ model.properties?.heading }</h2>
    </div>
    <Fragment set:html={ model.properties?.description?.markup } />

    <div id="skill-bars" class="space-y-4">
      {progressBars.map((skill, index) => (
        <div>
          <p>{skill.properties?.label}</p>
          <div class="bg-primary-700">
            <div 
              class={`h-2 ${index % 2 === 0 ? 'bg-secondary' : 'bg-accent'}`}
              style={`width: ${skill.properties?.value}%;`}>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>

  <div id="skill-badges">
    {iconsWithLabels.map(skill => (
      <div>
        <div class="badge-icon">
          <SkillBadge media={skill.properties?.icon} width={170} height={170} />
        </div>
        <p class="text-center">{ skill.properties?.label }</p>
      </div>
    ))}
  </div>
</section>
