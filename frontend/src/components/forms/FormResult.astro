---
import SuccessIcon from "../../assets/images/smiley.svg";
import ErrorIcon from "../../assets/images/warning.svg";
import crypto from "crypto";

interface Props {
  successMessage: string;
  hash?: string;
}

// Generate a deterministic hash based on component props + random
// this is so that we can always find the exact component instance
// for the script to target
const defaultHash = crypto
  .createHash("md5")
  .update(JSON.stringify(Astro.props) + Date.now().toString() + Math.random())
  .digest("hex")
  .slice(0, 8); // shorten it

const { successMessage, hash = defaultHash } = Astro.props;
const iconSizePx = 42;
---

<style is:inline>
form:not(.success, .error) .form-result {
  transform: translateY(25px);
  opacity: 0;
  pointer-events: none;
  user-select: none;
}

form:not(.success) .form-result .success,
form:not(.error) .form-result .error {
  display: none;
}
</style>

<style>
.form-result {
  display: grid;
  place-items: center;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  background-color: var(--color-primary);
  @media (prefers-reduced-motion: no-preference) {
    transition: var(--default-transition);
  }
}

.form-result > div {
  --border-width: 3px;
  --border-radius: 1rem;

  outline: var(--border-width) solid currentColor;
  backdrop-filter: blur(10px);
  border-radius: var(--border-radius);
  box-shadow: -12px 12px 0 currentColor;
  @media (prefers-reduced-motion: no-preference) {
    transition: box-shadow var(--default-transition-duration) var(--default-transition-timing);
  }
  &:hover {
    box-shadow: -20px 20px 0 currentColor;
  }
}

.window-bar {
  padding: 1rem;
  display: flex;
  justify-content: flex-end;
  gap: 0.5rem;
  border-bottom: var(--border-width) solid currentColor;
}

.window-bar > div {
  width: 1rem;
  height: auto;
  aspect-ratio: 1/1;
  border-radius: 100%;
  background-color: currentColor;
}

.window-content {
  padding-inline: 1.25rem;
  padding-block: 3rem;
  fill: currentColor;
}

.success, .error {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  text-align: center;
  align-items: center;
  max-width: 45ch;
}

.error button {
  padding-inline: 1rem;
  padding-block: 0.5rem;
  border: 2px solid currentColor;
  color: currentColor;
  border-radius: calc(var(--border-radius) / 2);
  @media (prefers-reduced-motion: no-preference) {
    transition: all var(--default-transition-duration) var(--default-transition-timing);
  }
}
</style>

<!-- on successful submission use text-secondary-400 for the result, otherwise use text-accent -->
<div class="form-result" data-hash={hash}>
  <div>
    <div class="window-bar">
      <div></div>
      <div></div>
      <div></div>
    </div>

    <div class="window-content p-4 pb-20 fill-current">

      <div class="success">
        <SuccessIcon height={iconSizePx} width={iconSizePx} />
        <h3 class="text-4xl font-bold">Email was sent succesfully</h3>
        <p>{successMessage}</p>
      </div>

      <div class="error flex gap-2 items-center">
        <ErrorIcon width={iconSizePx} height={iconSizePx} />
        <h3 class="text-4xl font-bold">Could not send email</h3>
        <p class="error-message">Something went wrong. Please try again later.</p>
        <p>If the problem persists, contact me directly from the email address provided in this section</p>
        <button type="button">
          Retry
        </button>
      </div>

    </div>
  </div>
</div>

<script is:inline define:vars={{ hash: hash }}>
/** @type {HTMLButtonElement | null} */
const retryButton = document.querySelector(`.form-result[data-hash="${hash}"] button`);
if (!retryButton) throw new Error(`.form-result[data-hash="${hash}"] button was not found`);

retryButton.addEventListener("click", async (_) => {
  const form = document.querySelector(`form:has(.form-result[data-hash="${hash}"])`);
  if (!form) throw new Error(`form:has(.form-result[data-hash="${hash}"]) was not found`);
  form.classList.remove("error");
});
</script>
