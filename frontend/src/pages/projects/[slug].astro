---
import type { 
  ProjectDetailsContentModel,
  PersonElementModel
} from "../../client";
import { GetContent, GetChildContent, GetSeoProperties, BaseApiUrl } from "../../utils/umbraco";
import { Picture } from "astro:assets";

import Layout from "../../layouts/Layout.astro";
import LinkWithIcon from "../../components/LinkWithIcon.astro";

import "../../styles/global.css";

// https://docs.astro.build/en/guides/routing/#static-ssg-mode
export async function getStaticPaths() {
  const projects = await GetChildContent<ProjectDetailsContentModel>("/projects");
  return projects.items.map(project => {
    const cleanedPath = project.route.path.replace("/projects", "");
    return { 
      params: { slug: cleanedPath },
      props: {
        model: project,
        seoProperties: GetSeoProperties(project),
      }
    }
  })
}

const { model, seoProperties } = Astro.props;

const teamMembers = model.properties?.team?.items.map(item => item.content) as PersonElementModel[]

function formatDate() {
  const startDate = model.properties?.startingTime ? new Date(model.properties?.startingTime) : null;
  const endDate = model.properties?.endTime ? new Date(model.properties?.endTime) : null;

  let formattedString = "";
  formattedString += startDate ? `${startDate?.getDay()}.${startDate?.getMonth()}.${startDate?.getFullYear()}` : "";
  formattedString += " -> ";
  formattedString += endDate ? `${endDate?.getDay()}.${endDate?.getMonth()}.${endDate?.getFullYear()}` : "";

  return formattedString;
}

const imageUrl = model.properties?.image?.[0].url ? `${BaseApiUrl}${model.properties?.image?.[0].url}` : null;
---

<style>
/* gradient to mix the image more with the overall style */
.image-container::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 50%;
  background: linear-gradient(to top, var(--color-primary), transparent);
  pointer-events: none;
}

/* color the image to match the theme */
.image-container:has(img)::before {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--color-secondary);
  mix-blend-mode: multiply;
  opacity: 0.2;
  backdrop-filter: saturate(0);
  pointer-events: none;
}

.grid-pattern {
  opacity: 0.5;
  aspect-ratio: 16/9;
}

picture > img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
</style>

<Layout seoProperties={seoProperties}>
<section class="no-container mt-16 max-w-content mx-auto">

  <div class="image-container max-h-96 overflow-clip relative w-full 
    h-full shadow-inner aspect-video motion-safe:transition-[max-height]">
    { imageUrl && <Picture 
        id="portfolio-image"
        src={imageUrl}
        alt={model.properties?.altText ?? "placeholder image"}
        width={1280}
        height={720}
        layout="full-width"
        formats={["avif", "webp", "jpeg"]}
      />
    }
  </div>

  <div class="px-5 py-8 grid gap-y-6 gap-x-16 sm:px-10 xl:grid-cols-3">
    <div class="space-y-6 xl:col-span-2">
      <div class="subheader">
        <p><span>//</span> Project</p>
        <h1>{model.name}</h1>
      </div>

      <div class="flex flex-wrap gap-2">
        { model.properties?.tags?.map(tag => 
              <span class="border border-secondary px-6 py-1.5 rounded-full cursor-default
          select-none capitalize motion-safe:transition-all hover:bg-secondary">{tag}</span>
        )}
      </div>

      <div class="flex gap-4 items-center">
        <p class="opacity-75 italic w-max">
          {formatDate()}
        </p>
        <hr class="grow border-primary-700">
      </div>

      <div class="space-y-6">
        <Fragment set:html={model.properties?.details?.markup}>
      </div>
    </div>

    <hr class="border-primary-700 xl:hidden">

    <div class="flex gap-y-6 gap-x-16 flex-wrap content-start py-6 px-4 
      border-primary-700 rounded-lg">
      <div>
        <div>
          <p><span class="text-secondary-400">//</span> Credits</p>
          <h2 class="text-4xl font-bold font-sans">The Team</h2>
        </div>
        { !teamMembers && <p>Just me</p> }
        { teamMembers?.map(member => (
          <div class="flex gap-2 items-center">
            <ul>
              <li>
                <p class="capitalize">{member.properties?.displayName}</p> 
                { member.properties?.links?.map(link => (
                  <LinkWithIcon link={link} />
                ))}
              </li>
            </ul>
          </div>
        ))}
      </div>

      <div>
        <div>
          <p><span class="text-secondary-400">//</span> Links</p>
          <h2 class="text-4xl font-bold font-sans">Find out more</h2>
        </div>
        <ul class="space-y-2">
          { model.properties?.links?.length === 0 && <li>No links found</li>}
          { model.properties?.links?.map(link => (
            <li>
              <LinkWithIcon link={link} />
            </li>
          ))}
        </ul>
      </div>

    </div>

  </div>
  </section>
</Layout>
